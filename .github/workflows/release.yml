name: Automated Release

on:
  #schedule:
  #- cron: '0 8 * * 6'  # Release at Beijing Time 16:00 Sat
  push:
    branches: [ zeno2 ]
    #branches: [ stable ]
    #tags: [ 'v*' ]

env:
  BUILD_TYPE: Release

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Get Date
      id: get_date
      run: python -c "import datetime; d = datetime.datetime.now(); print('::set-output name=date::{}.{}.{}'.format(d.year, d.month, d.day))"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: true
        tag_name: v${{ steps.get_date.outputs.date }}
        release_name: ${{ steps.get_date.outputs.date }}
        body: "(Automated Release by Github Actions)\n\n- branch ${{ github.ref }}\n- commit ${{ github.sha }}\n- date ${{ steps.get_date.outputs.date }}\n\nWindows: After download, extract the zip file to a directory, then double-click the file `000_start.bat` in that directory to start our application. Alternatively you may manually run `zenoedit.exe`. If you encounter bugs, please let us know by submitting [a Github Issue](https://github.com/zenustech/zeno/issues), thank for your support!\n\nLinux: We support Ubuntu 18.04 and above. Extract the downloaded tar.gz to a directory, then run `bash 000_start.sh` in that directory to start our application. Alternatively you may manually run `usr/bin/zenoedit`, or simply extract it to the root so that it is `/usr/bin/zenoedit`. Try `chmod +x usr/bin/*` if they don't have execute permission."

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  build:
    strategy:
      matrix:
        include:
        - os: ubuntu-18.04  # cihou linuxdeployqt
          cmake_args: -DCMAKE_CXX_COMPILER=g++-9
        - os: windows-latest

    needs: release
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.15.2
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{matrix.cmake_args}}

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}}

    - name: Packaging
      run: python misc/ci/package.py

    - name: Versioning
      id: versioning
      run: python misc/ci/get_ver.py

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/build/bin.${{ steps.versioning.outputs.fileext }}
        asset_name: zeno-${{ steps.versioning.outputs.filename }}.${{ steps.versioning.outputs.fileext }}

    # todo: wanglin, please tell me your restful API for upload files
    #- name: Upload To Server
    #  run: python misc/ci/uploader.py ${{github.workspace}}/build/bin.zip ${{ steps.versioning.outputs.filename }}
