cmake_minimum_required(VERSION 3.18)

if (UNIX)
    if ($ENV{HOME} STREQUAL "/home/dilei")
        message("-- ZHXX detected, making him happy")
        set(ZHXX ON)
    elseif ($ENV{HOME} STREQUAL "/home/bate")
        message("-- BATE detected, making him happy")
        set(BATE ON)
    endif()
endif()

if (BATE)
    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} /usr/local/lib/cmake/hipSYCL)
endif()

if (NOT CMAKE_BUILD_TYPE)
    if (BATE)
        set(CMAKE_BUILD_TYPE Debug)
    elseif (ZHXX)
        set(CMAKE_BUILD_TYPE Release)
    else()
        set(CMAKE_BUILD_TYPE Release)
    endif()
endif()
message("-- Build type: ${CMAKE_BUILD_TYPE}")

if (BATE OR ZHXX)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(BUILD_SHARED_LIBS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
if (WIN32)
    add_definitions(-DNOMINMAX -D_USE_MATH_DEFINES)
endif()

if (UNIX)
    find_program(CCACHE_PROGRAM ccache)
    if (CCACHE_PROGRAM)
        message("-- Found CCache: ${CCACHE_PROGRAM}")
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM})
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE_PROGRAM})
    endif()
endif()

project(zeno VERSION 0.1 LANGUAGES C CXX)

if (NOT ZENO_EXECUTABLE)
    set(ZENO_EXECUTABLE editor)
endif()

option(ZENO_WITH_LEGACY "Build Zeno Legacy Library" OFF)
option(ZENO_WITH_BACKWARD "Enable stack backtrace for Zeno" OFF)
option(ZENO_WITH_SYCL "Enable SYCL support for Zeno" OFF)
# https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
set(HIPSYCL_TARGETS "omp;cuda:sm_52;cuda:sm_61;cuda:sm_70;cuda:sm_75;cuda:sm_86")

if (BATE)
    set(ZENO_WITH_BACKWARD ON)
    set(ZENO_WITH_LEGACY OFF)
    set(ZENO_WITH_SYCL ON)
    set(HIPSYCL_TARGETS "omp")
    set(ZENO_EXECUTABLE client)
endif()
if (ZHXX)
    set(ZENO_WITH_BACKWARD ON)
    set(ZENO_WITH_LEGACY ON)
    set(ZENO_WITH_SYCL OFF)
    set(ZENO_EXECUTABLE editor)
endif()

if (ZENO_WITH_SYCL)
    message("-- Building Zeno with hipSYCL targets: [${HIPSYCL_TARGETS}]")
    find_package(hipSYCL CONFIG REQUIRED)
    macro(target_sycl_sources target visibility)
        target_sources(${target} ${visibility} ${ARGN})
        add_sycl_to_target(TARGET ${target} SOURCES ${ARGN})
        target_compile_definitions(${target} PUBLIC -DZENO_WITH_SYCL)
    endmacro()
else()
    message(WARNING "Building Zeno with host emulated SYCL")
    macro(target_sycl_sources target visibility)
        target_sources(${target} ${visibility} ${ARGN})
    endmacro()
endif()

add_subdirectory(tpls)

message("-- Building Zeno Executable: [${ZENO_EXECUTABLE}]")
if (ZENO_EXECUTABLE STREQUAL "tests")
    message("-- Enabling CMake Testing")
    enable_testing()
endif()
add_subdirectory(${ZENO_EXECUTABLE})

message("-- Building Zeno Core Library")
add_subdirectory(src)

if (ZENO_WITH_LEGACY)
    message("-- Building Zeno Legacy Library")
    add_subdirectory(legacy)
endif()
