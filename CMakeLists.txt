cmake_minimum_required(VERSION 3.18)

set(CMAKE_CXX_STANDARD 17)

project(zeno LANGUAGES C CXX)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

if (CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -w")
endif()
if (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /w")
endif()
if (WIN32)
    add_definitions(-DNOMINMAX -D_USE_MATH_DEFINES)
endif()
if (UNIX)
    find_program(CCACHE_PROGRAM ccache)
    if (CCACHE_PROGRAM)
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM})
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE_PROGRAM})
        message(STATUS "Found CCache: ${CCACHE_PROGRAM}")
    endif()
endif()

option(ZENO_BUILD_EXTENSIONS "Build extension modules for ZENO" ON)
option(ZENO_FAULTHANDLER "Enable ZENO fault handler for traceback" ON)
option(ZENO_BENCHMARKING "Enable ZENO benchmarking timer" ON)
option(ZENO_FIXED_OUTPUT "Output files to fixed position" ON)
option(ZENO_ENABLE_OPENMP "Enable OpenMP in ZENO for parallelism" ON)
option(ZENO_FAIL_SILENTLY "Silently supress error as possible" OFF)
option(ZENO_HIDE_SYMBOLS "Hide DLL symbols from global scope" OFF)
option(ZENO_BUILD_EDITOR "Build Zeno Editor" ON)
option(ZENO_BUILD_DESIGNER "Build Zeno Designer" ON)

if (ZENO_FIXED_OUTPUT)
    set(OUTPUT_DIR ${PROJECT_BINARY_DIR}/bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIR})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIR})
    if (WIN32)
        set(CMAKE_DEBUG_POSTFIX "")
    endif()
endif()

if (ZENO_FAULTHANDLER)
    add_subdirectory(external/backward-cpp)
endif()

add_subdirectory(external/spdlog)
add_subdirectory(src/zeno)

if (ZENO_BUILD_EXTENSIONS)
    add_subdirectory(projects)
endif()

if (ZENO_BUILD_EDITOR OR ZENO_BUILD_DESIGNER)
    message(STATUS "Building Zeno UI Library")
    add_subdirectory(src/zenoui)
    add_subdirectory(src/zenoio)
endif()

if (ZENO_BUILD_EDITOR)
    message(STATUS "Building Zeno Editor")
    add_subdirectory(external/glad)
    add_subdirectory(src/zenovis)
    add_subdirectory(src/zenoedit)
endif()

if (ZENO_BUILD_DESIGNER)
    message(STATUS "Building Zeno Designer")
    add_subdirectory(src/zenodesign)
endif()
