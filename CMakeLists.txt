cmake_minimum_required(VERSION 3.18)

if (UNIX)
    if ($ENV{HOME} STREQUAL "/home/dilei")
        message("-- ZHXX detected, making him happy")
        set(ZHXX ON)
    elseif ($ENV{HOME} STREQUAL "/home/bate")
        message("-- BATE detected, making him happy")
        set(BATE ON)
    endif()
endif()

if (BATE)
    set(SYCL_TARGETS nvptx64-nvidia-cuda)
endif()
if (SYCL_TARGETS)
    set(CMAKE_CXX_COMPILER "/opt/sycl/bin/clang++")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,-rpath=/opt/sycl/lib -std=c++17 -fsycl -fsycl-targets=${SYCL_TARGETS}")
endif()

if (NOT CMAKE_BUILD_TYPE)
    if (BATE)
        set(CMAKE_BUILD_TYPE Debug)
    elseif (ZHXX)
        set(CMAKE_BUILD_TYPE Release)
    else()
        set(CMAKE_BUILD_TYPE Release)
    endif()
endif()
message("-- Build type: ${CMAKE_BUILD_TYPE}")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(BUILD_SHARED_LIBS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
if (WIN32)
    add_definitions(-DNOMINMAX -D_USE_MATH_DEFINES)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

if (UNIX)
    find_program(CCACHE_PROGRAM ccache)
    if (CCACHE_PROGRAM)
        message("-- Found CCache: ${CCACHE_PROGRAM}")
        set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_PROGRAM})
        set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE_PROGRAM})
    endif()
endif()

project(zeno VERSION 0.1 LANGUAGES C CXX)

if (NOT ZENO_EXECUTABLE)
    set(ZENO_EXECUTABLE editor)
endif()

option(ZENO_WITH_LEGACY "Build Zeno Legacy Library" OFF)
option(ZENO_WITH_BACKWARD "Enable stack backtrace for Zeno" OFF)

if (BATE)
    set(ZENO_WITH_BACKWARD OFF)
    set(ZENO_WITH_LEGACY OFF)
    set(ZENO_EXECUTABLE cliface)
endif()
if (ZHXX)
    set(ZENO_WITH_BACKWARD ON)
    set(ZENO_WITH_LEGACY ON)
    set(ZENO_EXECUTABLE editor)
endif()

add_subdirectory(tpls)

message("-- Building Zeno Executable: [${ZENO_EXECUTABLE}]")
if (ZENO_EXECUTABLE STREQUAL "tests")
    message("-- Enabling CMake Testing")
    enable_testing()
endif()
add_subdirectory(${ZENO_EXECUTABLE})

message("-- Building Zeno Core Library")
add_subdirectory(src)

if (ZENO_WITH_LEGACY)
    message("-- Building Zeno Legacy Library")
    add_subdirectory(legacy)
endif()
