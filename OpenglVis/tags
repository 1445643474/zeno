!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
$(VERBOSE).SILENT	build/Makefile	/^$(VERBOSE).SILENT:$/;"	t	language:Make
$(VERBOSE)MAKESILENT	build/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m	language:Make
%	build/Makefile	/^% : %,v$/;"	t	language:Make
%	build/Makefile	/^% : RCS\/%$/;"	t	language:Make
%	build/Makefile	/^% : RCS\/%,v$/;"	t	language:Make
%	build/Makefile	/^% : SCCS\/s.%$/;"	t	language:Make
%	build/Makefile	/^% : s.%$/;"	t	language:Make
ARCHITECTURE_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#   define ARCHITECTURE_ID /;"	d	language:C	file:
ARCHITECTURE_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID /;"	d	language:C	file:
ARCHITECTURE_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define ARCHITECTURE_ID$/;"	d	language:C	file:
ARCHITECTURE_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	language:C++	file:
ARCHITECTURE_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	language:C++	file:
Buffer	ogl/buffer.hpp	/^    struct Buffer {$/;"	s	language:C++
Buffer	ogl/buffer.hpp	/^  Buffer(GLuint target = GL_ARRAY_BUFFER) : target(target) {$/;"	f	language:C++	struct:Buffer	access:public	signature:(GLuint target=GL_ARRAY_BUFFER)
Buffer::Buffer	ogl/buffer.hpp	/^  Buffer(GLuint target = GL_ARRAY_BUFFER) : target(target) {$/;"	f	language:C++	struct:Buffer	access:public	signature:(GLuint target=GL_ARRAY_BUFFER)
Buffer::attribute	ogl/buffer.hpp	/^  void attribute(GLuint index, size_t offset, size_t stride, GLuint type,$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(GLuint index,size_t offset,size_t stride,GLuint type,GLuint count) const
Buffer::bind	ogl/buffer.hpp	/^  void bind() const { C(glBindBuffer(target, buf)); }$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:() const
Buffer::bind_data	ogl/buffer.hpp	/^  template <typename T> void bind_data(std::vector<T> const &arr) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(std::vector<T> const & arr) const
Buffer::bind_data	ogl/buffer.hpp	/^  void bind_data(const void *data, size_t size,$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(const void * data,size_t size,GLuint usage=GL_STATIC_DRAW) const
Buffer::bind_data	ogl/buffer.hpp	/^  void bind_data(std::vector<glm::vec<N, T, Q>> const &arr) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(std::vector<glm::vec<N,T,Q>> const & arr) const
Buffer::bind_sub_data	ogl/buffer.hpp	/^  void bind_sub_data(const void *data, size_t size, size_t offset) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(const void * data,size_t size,size_t offset) const
Buffer::buf	ogl/buffer.hpp	/^  GLuint buf;$/;"	m	language:C++	struct:Buffer	typeref:typename:GLuint	access:public
Buffer::disable_attribute	ogl/buffer.hpp	/^  void disable_attribute(GLuint index) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(GLuint index) const
Buffer::map	ogl/buffer.hpp	/^  void *map(GLuint access = GL_READ_WRITE) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void *	access:public	signature:(GLuint access=GL_READ_WRITE) const
Buffer::target	ogl/buffer.hpp	/^  GLuint target{GL_ARRAY_BUFFER};$/;"	m	language:C++	struct:Buffer	typeref:typename:GLuint	access:public
Buffer::unbind	ogl/buffer.hpp	/^  void unbind() const { C(glBindBuffer(target, 0)); }$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:() const
Buffer::unmap	ogl/buffer.hpp	/^  void unmap() const { C(glUnmapBuffer(target)); }$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:() const
Buffer::~Buffer	ogl/buffer.hpp	/^  ~Buffer() { C(glDeleteBuffers(1, &buf)); }$/;"	f	language:C++	struct:Buffer	access:public	signature:()
C	ogl/stdafx.hpp	/^#define C(/;"	d	language:C++	signature:(x)
CMAKE_AR	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v	language:CMake
CMAKE_AR	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v	language:CMake
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/bate\/Develop\/Mn\/Projects\/OpenglVis\/build$/;"	m	language:Make
CMAKE_C11_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")$/;"	v	language:CMake
CMAKE_C90_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")$/;"	v	language:CMake
CMAKE_C99_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")$/;"	v	language:CMake
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")$/;"	v	language:CMake
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v	language:CMake
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m	language:Make
CMAKE_COMPILER_IS_CYGWIN	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v	language:CMake
CMAKE_COMPILER_IS_CYGWIN	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_CYGWIN )$/;"	v	language:CMake
CMAKE_COMPILER_IS_GNUCC	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCC 1)$/;"	v	language:CMake
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v	language:CMake
CMAKE_COMPILER_IS_MINGW	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v	language:CMake
CMAKE_COMPILER_IS_MINGW	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_MINGW )$/;"	v	language:CMake
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v	language:CMake
CMAKE_CROSSCOMPILING	build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v	language:CMake
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v	language:CMake
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v	language:CMake
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v	language:CMake
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v	language:CMake
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v	language:CMake
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v	language:CMake
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v	language:CMake
CMAKE_CXX_COMPILER	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/c++")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/quicksilver.dir/DependInfo.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v	language:CMake
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v	language:CMake
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "10.2.0")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v	language:CMake
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v	language:CMake
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v	language:CMake
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v	language:CMake
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v	language:CMake
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/10.2.0;\/usr\/include\/c++\/10./;"	v	language:CMake
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/10.2.0;\/usr\/lib/;"	v	language:CMake
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v	language:CMake
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v	language:CMake
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v	language:CMake
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v	language:CMake
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "")$/;"	v	language:CMake
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v	language:CMake
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v	language:CMake
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v	language:CMake
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v	language:CMake
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v	language:CMake
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v	language:CMake
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;CPP)$/;"	v	language:CMake
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "14")$/;"	v	language:CMake
CMAKE_CXX_TARGET_INCLUDE_PATH	build/CMakeFiles/quicksilver.dir/DependInfo.cmake	/^set(CMAKE_CXX_TARGET_INCLUDE_PATH$/;"	v	language:CMake
CMAKE_C_ABI_COMPILED	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_ABI_COMPILED TRUE)$/;"	v	language:CMake
CMAKE_C_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")$/;"	v	language:CMake
CMAKE_C_COMPILER	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER "\/usr\/bin\/cc")$/;"	v	language:CMake
CMAKE_C_COMPILER_ABI	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ABI "ELF")$/;"	v	language:CMake
CMAKE_C_COMPILER_AR	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_AR "\/usr\/bin\/gcc-ar")$/;"	v	language:CMake
CMAKE_C_COMPILER_ARG1	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ARG1 "")$/;"	v	language:CMake
CMAKE_C_COMPILER_ENV_VAR	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ENV_VAR "CC")$/;"	v	language:CMake
CMAKE_C_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_FRONTEND_VARIANT "")$/;"	v	language:CMake
CMAKE_C_COMPILER_ID	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID "GNU")$/;"	v	language:CMake
CMAKE_C_COMPILER_ID_RUN	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_ID_RUN 1)$/;"	v	language:CMake
CMAKE_C_COMPILER_LOADED	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_LOADED 1)$/;"	v	language:CMake
CMAKE_C_COMPILER_RANLIB	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib")$/;"	v	language:CMake
CMAKE_C_COMPILER_VERSION	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION "10.2.0")$/;"	v	language:CMake
CMAKE_C_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_VERSION_INTERNAL "")$/;"	v	language:CMake
CMAKE_C_COMPILER_WORKS	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WORKS TRUE)$/;"	v	language:CMake
CMAKE_C_COMPILER_WRAPPER	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILER_WRAPPER "")$/;"	v	language:CMake
CMAKE_C_COMPILE_FEATURES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macr/;"	v	language:CMake
CMAKE_C_IGNORE_EXTENSIONS	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v	language:CMake
CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/10.2.0\/include;/;"	v	language:CMake
CMAKE_C_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-pc-linux-gnu\/10.2.0;\/usr\/lib;\//;"	v	language:CMake
CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v	language:CMake
CMAKE_C_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")$/;"	v	language:CMake
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v	language:CMake
CMAKE_C_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v	language:CMake
CMAKE_C_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LIBRARY_ARCHITECTURE "")$/;"	v	language:CMake
CMAKE_C_LINKER_PREFERENCE	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_LINKER_PREFERENCE 10)$/;"	v	language:CMake
CMAKE_C_PLATFORM_ID	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_PLATFORM_ID "Linux")$/;"	v	language:CMake
CMAKE_C_SIMULATE_ID	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_ID "")$/;"	v	language:CMake
CMAKE_C_SIMULATE_VERSION	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIMULATE_VERSION "")$/;"	v	language:CMake
CMAKE_C_SIZEOF_DATA_PTR	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SIZEOF_DATA_PTR "8")$/;"	v	language:CMake
CMAKE_C_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)$/;"	v	language:CMake
CMAKE_C_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")$/;"	v	language:CMake
CMAKE_DEPENDS_CHECK_CXX	build/CMakeFiles/quicksilver.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_CHECK_CXX$/;"	v	language:CMake
CMAKE_DEPENDS_GENERATOR	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v	language:CMake
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/quicksilver.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v	language:CMake
CMAKE_DEPEND_INFO_FILES	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v	language:CMake
CMAKE_FORCE_UNIX_PATHS	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v	language:CMake
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/quicksilver.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v	language:CMake
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-5.10.7-arch1-1")$/;"	v	language:CMake
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v	language:CMake
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v	language:CMake
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "5.10.7-arch1-1")$/;"	v	language:CMake
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v	language:CMake
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v	language:CMake
CMAKE_INSTALL_CONFIG_NAME	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v	language:CMake
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v	language:CMake
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v	language:CMake
CMAKE_INSTALL_PREFIX	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v	language:CMake
CMAKE_INSTALL_SO_NO_EXE	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "0")$/;"	v	language:CMake
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")$/;"	v	language:CMake
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v	language:CMake
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v	language:CMake
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "")$/;"	v	language:CMake
CMAKE_LINKER	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v	language:CMake
CMAKE_LINKER	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v	language:CMake
CMAKE_MAKEFILE_DEPENDS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v	language:CMake
CMAKE_MAKEFILE_OUTPUTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v	language:CMake
CMAKE_MAKEFILE_PRODUCTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v	language:CMake
CMAKE_MT	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_MT "")$/;"	v	language:CMake
CMAKE_MT	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v	language:CMake
CMAKE_OBJDUMP	build/cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/usr\/bin\/objdump")$/;"	v	language:CMake
CMAKE_RANLIB	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v	language:CMake
CMAKE_RANLIB	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v	language:CMake
CMAKE_RELATIVE_PATH_TOP_BINARY	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/bate\/Develop\/Mn\/Projects\/OpenglVis\/build")$/;"	v	language:CMake
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/bate\/Develop\/Mn\/Projects\/OpenglVis")$/;"	v	language:CMake
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")$/;"	v	language:CMake
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v	language:CMake
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/bate\/Develop\/Mn\/Projects\/OpenglVis$/;"	m	language:Make
CMAKE_SYSTEM	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-5.10.7-arch1-1")$/;"	v	language:CMake
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v	language:CMake
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v	language:CMake
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v	language:CMake
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.19.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "5.10.7-arch1-1")$/;"	v	language:CMake
CMAKE_TARGET_LINKED_INFO_FILES	build/CMakeFiles/quicksilver.dir/DependInfo.cmake	/^set(CMAKE_TARGET_LINKED_INFO_FILES$/;"	v	language:CMake
COMPILER_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_ID /;"	d	language:C	file:
COMPILER_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	language:C++	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_INTERNAL /;"	d	language:C	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_INTERNAL /;"	d	language:C	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	language:C++	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MAJOR /;"	d	language:C	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MAJOR /;"	d	language:C	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MAJOR /;"	d	language:C	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	language:C++	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_MINOR /;"	d	language:C	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_MINOR /;"	d	language:C	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_MINOR /;"	d	language:C	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	language:C++	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^  # define COMPILER_VERSION_PATCH /;"	d	language:C	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#   define COMPILER_VERSION_PATCH /;"	d	language:C	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_PATCH /;"	d	language:C	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_PATCH /;"	d	language:C	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	language:C++	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	language:C++	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define COMPILER_VERSION_TWEAK /;"	d	language:C	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define COMPILER_VERSION_TWEAK /;"	d	language:C	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	language:C++	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	language:C++	file:
CXX_STD	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	language:C++	file:
CXX_STD	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	language:C++	file:
CXX_STD	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	language:C++	file:
CYGWIN	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^  set(CYGWIN 1)$/;"	v	language:CMake
CYGWIN	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^  set(CYGWIN 1)$/;"	v	language:CMake
C_DIALECT	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT /;"	d	language:C	file:
C_DIALECT	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define C_DIALECT$/;"	d	language:C	file:
C_DIALECT	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define C_DIALECT /;"	d	language:C	file:
Collapsed	imgui.ini	/^Collapsed=0$/;"	k	language:Iniconf	section:Window
Collapsed	imgui.ini	/^Collapsed=1$/;"	k	language:Iniconf	section:Window
Column 0  Weight	imgui.ini	/^Column 0  Weight=1.0000$/;"	k	language:Iniconf	section:Table
Column 0  Width	imgui.ini	/^Column 0  Width=56$/;"	k	language:Iniconf	section:Table
Column 0  Width	imgui.ini	/^Column 0  Width=63$/;"	k	language:Iniconf	section:Table
Column 0  Width	imgui.ini	/^Column 0  Width=86$/;"	k	language:Iniconf	section:Table
Column 1  Weight	imgui.ini	/^Column 1  Weight=1.0000$/;"	k	language:Iniconf	section:Table
Column 1  Width	imgui.ini	/^Column 1  Width=56$/;"	k	language:Iniconf	section:Table
Column 1  Width	imgui.ini	/^Column 1  Width=63$/;"	k	language:Iniconf	section:Table
Column 1  Width	imgui.ini	/^Column 1  Width=84$/;"	k	language:Iniconf	section:Table
Column 1  Width	imgui.ini	/^Column 1  Width=86$/;"	k	language:Iniconf	section:Table
Column 2  Weight	imgui.ini	/^Column 2  Weight=1.0000$/;"	k	language:Iniconf	section:Table
Column 2  Width	imgui.ini	/^Column 2  Width=-1$/;"	k	language:Iniconf	section:Table
Column 2  Width	imgui.ini	/^Column 2  Width=126$/;"	k	language:Iniconf	section:Table
Column 2  Width	imgui.ini	/^Column 2  Width=56$/;"	k	language:Iniconf	section:Table
Column 2  Width	imgui.ini	/^Column 2  Width=63$/;"	k	language:Iniconf	section:Table
Column 2  Width	imgui.ini	/^Column 2  Width=86$/;"	k	language:Iniconf	section:Table
Column 3  Weight	imgui.ini	/^Column 3  Weight=1.0000$/;"	k	language:Iniconf	section:Table
Column 4  Weight	imgui.ini	/^Column 4  Weight=1.0000$/;"	k	language:Iniconf	section:Table
Column 5  Weight	imgui.ini	/^Column 5  Weight=-1.0000$/;"	k	language:Iniconf	section:Table
DEC	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#define DEC(/;"	d	language:C	file:	signature:(n)
DEC	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	language:C++	file:	signature:(n)
EQUALS	build/Makefile	/^EQUALS = =$/;"	m	language:Make
FBO	ogl/texture.hpp	/^  FBO() {$/;"	f	language:C++	struct:FBO	access:public	signature:()
FBO	ogl/texture.hpp	/^struct FBO {$/;"	s	language:C++
FBO::FBO	ogl/texture.hpp	/^  FBO() {$/;"	f	language:C++	struct:FBO	access:public	signature:()
FBO::attach	ogl/texture.hpp	/^  void attach(Texture const &texture) {$/;"	f	language:C++	struct:FBO	typeref:typename:void	access:public	signature:(Texture const & texture)
FBO::bind	ogl/texture.hpp	/^  void bind() const {$/;"	f	language:C++	struct:FBO	typeref:typename:void	access:public	signature:() const
FBO::complete	ogl/texture.hpp	/^  bool complete() const {$/;"	f	language:C++	struct:FBO	typeref:typename:bool	access:public	signature:() const
FBO::fbo	ogl/texture.hpp	/^  GLuint fbo;$/;"	m	language:C++	struct:FBO	typeref:typename:GLuint	access:public
FBO::target	ogl/texture.hpp	/^  GLuint target{GL_FRAMEBUFFER};$/;"	m	language:C++	struct:FBO	typeref:typename:GLuint	access:public
FBO::unbind	ogl/texture.hpp	/^  void unbind() const {$/;"	f	language:C++	struct:FBO	typeref:typename:void	access:public	signature:() const
FBO::~FBO	ogl/texture.hpp	/^  ~FBO() {$/;"	f	language:C++	struct:FBO	access:public	signature:()
HEX	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#define HEX(/;"	d	language:C	file:	signature:(n)
HEX	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	language:C++	file:	signature:(n)
ID_VOID_MAIN	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define ID_VOID_MAIN$/;"	d	language:C	file:
MINGW	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^  set(MINGW 1)$/;"	v	language:CMake
MINGW	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^  set(MINGW 1)$/;"	v	language:CMake
Mesh	Object.hpp	/^class Mesh : public Object {$/;"	c	language:C++	inherits:Object
Mesh::draw	Mesh.cpp	/^void Mesh::draw() {$/;"	f	language:C++	class:Mesh	typeref:typename:void	signature:()
Mesh::draw	Object.hpp	/^  virtual void draw() override;$/;"	p	language:C++	class:Mesh	typeref:typename:void	access:public	signature:()
Mesh::get_program	Mesh.cpp	/^Program *Mesh::get_program() {$/;"	f	language:C++	class:Mesh	typeref:typename:Program *	signature:()
Mesh::get_program	Object.hpp	/^  Program *get_program();$/;"	p	language:C++	class:Mesh	typeref:typename:Program *	access:private	signature:()
Mesh::load	Mesh.cpp	/^void Mesh::load(const char *path) {$/;"	f	language:C++	class:Mesh	typeref:typename:void	signature:(const char * path)
Mesh::load	Object.hpp	/^  virtual void load(const char *path) override;$/;"	p	language:C++	class:Mesh	typeref:typename:void	access:public	signature:(const char * path)
Mesh::normals	Object.hpp	/^  std::vector<glm::vec3> normals;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<glm::vec3>	access:private
Mesh::prog_	Mesh.cpp	/^std::unique_ptr<ShaderProgram> Mesh::prog_;$/;"	m	language:C++	class:Mesh	typeref:typename:std::unique_ptr<ShaderProgram>
Mesh::prog_	Object.hpp	/^  static std::unique_ptr<ShaderProgram> prog_;$/;"	m	language:C++	class:Mesh	typeref:typename:std::unique_ptr<ShaderProgram>	access:private
Mesh::update	Mesh.cpp	/^void Mesh::update() {$/;"	f	language:C++	class:Mesh	typeref:typename:void	signature:()
Mesh::update	Object.hpp	/^  virtual void update() override;$/;"	p	language:C++	class:Mesh	typeref:typename:void	access:public	signature:()
Mesh::uvs	Object.hpp	/^  std::vector<glm::vec2> uvs;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<glm::vec2>	access:private
Mesh::vbo	Object.hpp	/^  std::unique_ptr<Buffer> vbo;$/;"	m	language:C++	class:Mesh	typeref:typename:std::unique_ptr<Buffer>	access:private
Mesh::vertex_data	Object.hpp	/^  std::vector<float> vertex_data;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<float>	access:private
Mesh::vertices	Object.hpp	/^  std::vector<glm::vec3> vertices;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<glm::vec3>	access:private
N_	ogl/stdafx.hpp	/^#define N_ /;"	d	language:C++
Object	Object.hpp	/^class Object {$/;"	c	language:C++
Object::draw	Object.hpp	/^  virtual void draw() = 0;$/;"	p	language:C++	class:Object	typeref:typename:void	access:public	signature:()
Object::load	Object.hpp	/^  virtual void load(const char *path) = 0;$/;"	p	language:C++	class:Object	typeref:typename:void	access:public	signature:(const char * path)
Object::trans	Object.hpp	/^  Transform trans;$/;"	m	language:C++	class:Object	typeref:typename:Transform	access:public
Object::update	Object.hpp	/^  virtual void update() = 0;$/;"	p	language:C++	class:Object	typeref:typename:void	access:public	signature:()
PER_GL_ERR	stdafx.cpp	/^#define PER_GL_ERR(/;"	d	language:C++	file:	signature:(x)
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID /;"	d	language:C	file:
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define PLATFORM_ID$/;"	d	language:C	file:
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID /;"	d	language:C	file:
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define PLATFORM_ID$/;"	d	language:C	file:
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	language:C++	file:
PLATFORM_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	language:C++	file:
Particles	Object.hpp	/^class Particles : public Object {$/;"	c	language:C++	inherits:Object
Particles::draw	Object.hpp	/^  virtual void draw() override;$/;"	p	language:C++	class:Particles	typeref:typename:void	access:public	signature:()
Particles::draw	Particles.cpp	/^void Particles::draw() {$/;"	f	language:C++	class:Particles	typeref:typename:void	signature:()
Particles::get_program	Object.hpp	/^  Program *get_program();$/;"	p	language:C++	class:Particles	typeref:typename:Program *	access:private	signature:()
Particles::get_program	Particles.cpp	/^Program *Particles::get_program() {$/;"	f	language:C++	class:Particles	typeref:typename:Program *	signature:()
Particles::load	Object.hpp	/^  virtual void load(const char *path) override;$/;"	p	language:C++	class:Particles	typeref:typename:void	access:public	signature:(const char * path)
Particles::load	Particles.cpp	/^void Particles::load(const char *path) {$/;"	f	language:C++	class:Particles	typeref:typename:void	signature:(const char * path)
Particles::positions	Object.hpp	/^  std::vector<glm::vec3> positions;$/;"	m	language:C++	class:Particles	typeref:typename:std::vector<glm::vec3>	access:private
Particles::prog_	Object.hpp	/^  static std::unique_ptr<ShaderProgram> prog_;$/;"	m	language:C++	class:Particles	typeref:typename:std::unique_ptr<ShaderProgram>	access:private
Particles::prog_	Particles.cpp	/^std::unique_ptr<ShaderProgram> Particles::prog_;$/;"	m	language:C++	class:Particles	typeref:typename:std::unique_ptr<ShaderProgram>
Particles::update	Object.hpp	/^  virtual void update() override;$/;"	p	language:C++	class:Particles	typeref:typename:void	access:public	signature:()
Particles::update	Particles.cpp	/^void Particles::update() {$/;"	f	language:C++	class:Particles	typeref:typename:void	signature:()
Particles::vbo	Object.hpp	/^  std::unique_ptr<Buffer> vbo;$/;"	m	language:C++	class:Particles	typeref:typename:std::unique_ptr<Buffer>	access:private
Particles::velocities	Object.hpp	/^  std::vector<glm::vec3> velocities;$/;"	m	language:C++	class:Particles	typeref:typename:std::vector<glm::vec3>	access:private
Particles::vertex_data	Object.hpp	/^  std::vector<float> vertex_data;$/;"	m	language:C++	class:Particles	typeref:typename:std::vector<float>	access:private
Pos	imgui.ini	/^Pos=256,188$/;"	k	language:Iniconf	section:Window
Pos	imgui.ini	/^Pos=303,130$/;"	k	language:Iniconf	section:Window
Pos	imgui.ini	/^Pos=486,26$/;"	k	language:Iniconf	section:Window
Pos	imgui.ini	/^Pos=60,60$/;"	k	language:Iniconf	section:Window
Pos	imgui.ini	/^Pos=62,16$/;"	k	language:Iniconf	section:Window
Program	ogl/shader.hpp	/^  Program() {$/;"	f	language:C++	struct:Program	access:public	signature:()
Program	ogl/shader.hpp	/^struct Program {$/;"	s	language:C++
Program::Program	ogl/shader.hpp	/^  Program() {$/;"	f	language:C++	struct:Program	access:public	signature:()
Program::attach	ogl/shader.hpp	/^  void attach(Shader const &shader) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(Shader const & shader) const
Program::link	ogl/shader.hpp	/^  void link() const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:() const
Program::pro	ogl/shader.hpp	/^  GLuint pro;$/;"	m	language:C++	struct:Program	typeref:typename:GLuint	access:public
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, float val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,float val) const
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat3x3 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat3x3 const & val) const
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat3x4 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat3x4 const & val) const
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat4x3 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat4x3 const & val) const
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat4x4 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat4x4 const & val) const
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::vec2 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::vec2 const & val) const
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::vec3 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::vec3 const & val) const
Program::set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::vec4 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::vec4 const & val) const
Program::set_uniformi	ogl/shader.hpp	/^  void set_uniformi(const char *name, int val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,int val) const
Program::use	ogl/shader.hpp	/^  void use() const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:() const
Program::~Program	ogl/shader.hpp	/^  ~Program() {$/;"	f	language:C++	struct:Program	access:public	signature:()
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m	language:Make
RefScale	imgui.ini	/^RefScale=13$/;"	k	language:Iniconf	section:Table
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m	language:Make
SIMULATE_ID	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_ID /;"	d	language:C	file:
SIMULATE_ID	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	language:C++	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MAJOR /;"	d	language:C	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	language:C++	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_MINOR /;"	d	language:C	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	language:C++	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#  define SIMULATE_VERSION_PATCH /;"	d	language:C	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	language:C++	file:
STRINGIFY	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY(/;"	d	language:C	file:	signature:(X)
STRINGIFY	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	language:C++	file:	signature:(X)
STRINGIFY_HELPER	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^#define STRINGIFY_HELPER(/;"	d	language:C	file:	signature:(X)
STRINGIFY_HELPER	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	language:C++	file:	signature:(X)
Shader	ogl/shader.hpp	/^  Shader(GLuint type) : target(target) {$/;"	f	language:C++	struct:Shader	access:public	signature:(GLuint type)
Shader	ogl/shader.hpp	/^struct Shader {$/;"	s	language:C++
Shader::Shader	ogl/shader.hpp	/^  Shader(GLuint type) : target(target) {$/;"	f	language:C++	struct:Shader	access:public	signature:(GLuint type)
Shader::compile	ogl/shader.hpp	/^  void compile(std::string const &source) const {$/;"	f	language:C++	struct:Shader	typeref:typename:void	access:public	signature:(std::string const & source) const
Shader::sha	ogl/shader.hpp	/^  GLuint sha;$/;"	m	language:C++	struct:Shader	typeref:typename:GLuint	access:public
Shader::target	ogl/shader.hpp	/^  GLuint target{GL_ARRAY_BUFFER};$/;"	m	language:C++	struct:Shader	typeref:typename:GLuint	access:public
Shader::~Shader	ogl/shader.hpp	/^  ~Shader() {$/;"	f	language:C++	struct:Shader	access:public	signature:()
ShaderProgram	ShaderProgram.hpp	/^  ShaderProgram(std::string name) {$/;"	f	language:C++	struct:ShaderProgram	access:public	signature:(std::string name)
ShaderProgram	ShaderProgram.hpp	/^struct ShaderProgram : Program {$/;"	s	language:C++	inherits:Program
ShaderProgram::ShaderProgram	ShaderProgram.hpp	/^  ShaderProgram(std::string name) {$/;"	f	language:C++	struct:ShaderProgram	access:public	signature:(std::string name)
ShaderProgram::fs	ShaderProgram.hpp	/^  std::unique_ptr<Shader> vs, fs;$/;"	m	language:C++	struct:ShaderProgram	typeref:typename:std::unique_ptr<Shader>	access:public
ShaderProgram::vs	ShaderProgram.hpp	/^  std::unique_ptr<Shader> vs, fs;$/;"	m	language:C++	struct:ShaderProgram	typeref:typename:std::unique_ptr<Shader>	access:public
Size	imgui.ini	/^Size=117,79$/;"	k	language:Iniconf	section:Window
Size	imgui.ini	/^Size=338,256$/;"	k	language:Iniconf	section:Window
Size	imgui.ini	/^Size=380,130$/;"	k	language:Iniconf	section:Window
Size	imgui.ini	/^Size=532,131$/;"	k	language:Iniconf	section:Window
Size	imgui.ini	/^Size=550,652$/;"	k	language:Iniconf	section:Window
Table	imgui.ini	/^[Table][0x1F146634,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0x47600645,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0x49D11DC0,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0x49F8DCEA,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0x64418101,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0x82CBB907,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0x861D378E,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0x8DFA6E86,2]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0xA43C3885,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0xC9935533,3]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0xDE6957FF,6]$/;"	s	language:Iniconf
Table	imgui.ini	/^[Table][0xFABAAEF7,2]$/;"	s	language:Iniconf
Texture	ogl/texture.hpp	/^  Texture() {$/;"	f	language:C++	struct:Texture	access:public	signature:()
Texture	ogl/texture.hpp	/^struct Texture {$/;"	s	language:C++
Texture::Texture	ogl/texture.hpp	/^  Texture() {$/;"	f	language:C++	struct:Texture	access:public	signature:()
Texture::bind_image	ogl/texture.hpp	/^  void bind_image(void *img, size_t nx, size_t ny) {$/;"	f	language:C++	struct:Texture	typeref:typename:void	access:public	signature:(void * img,size_t nx,size_t ny)
Texture::bind_to	ogl/texture.hpp	/^  void bind_to(int num) {$/;"	f	language:C++	struct:Texture	typeref:typename:void	access:public	signature:(int num)
Texture::dtype	ogl/texture.hpp	/^  GLuint dtype{GL_UNSIGNED_BYTE};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::format	ogl/texture.hpp	/^  GLuint format{GL_RGBA};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::internal_fmt	ogl/texture.hpp	/^  GLuint internal_fmt{GL_RGBA8};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::load	ogl/texture.hpp	/^  void load(const char *path) {$/;"	f	language:C++	struct:Texture	typeref:typename:void	access:public	signature:(const char * path)
Texture::mag_filter	ogl/texture.hpp	/^  GLuint mag_filter{GL_LINEAR}, min_filter{GL_LINEAR};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::min_filter	ogl/texture.hpp	/^  GLuint mag_filter{GL_LINEAR}, min_filter{GL_LINEAR};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::target	ogl/texture.hpp	/^  GLuint target{GL_TEXTURE_2D};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::tex	ogl/texture.hpp	/^  GLuint tex;$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::wrap_s	ogl/texture.hpp	/^  GLuint wrap_s{GL_CLAMP_TO_EDGE}, wrap_t{GL_CLAMP_TO_EDGE};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::wrap_t	ogl/texture.hpp	/^  GLuint wrap_s{GL_CLAMP_TO_EDGE}, wrap_t{GL_CLAMP_TO_EDGE};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
Texture::~Texture	ogl/texture.hpp	/^  ~Texture() {$/;"	f	language:C++	struct:Texture	access:public	signature:()
Transform	Transform.hpp	/^struct Transform {$/;"	s	language:C++
Transform::get_matrix	Transform.hpp	/^  glm::mat4x4 get_matrix() {$/;"	f	language:C++	struct:Transform	typeref:typename:glm::mat4x4	access:public	signature:()
Transform::gui_editor	GUI.cpp	/^void Transform::gui_editor()$/;"	f	language:C++	class:Transform	typeref:typename:void	signature:()
Transform::gui_editor	Transform.hpp	/^  void gui_editor();$/;"	p	language:C++	struct:Transform	typeref:typename:void	access:public	signature:()
Transform::position	Transform.hpp	/^  glm::vec3 position{0, 0, 0};$/;"	m	language:C++	struct:Transform	typeref:typename:glm::vec3	access:public
Transform::rotationAngle	Transform.hpp	/^  float rotationAngle{0};$/;"	m	language:C++	struct:Transform	typeref:typename:float	access:public
Transform::rotationAxis	Transform.hpp	/^  glm::vec3 rotationAxis{0, 0, 1};$/;"	m	language:C++	struct:Transform	typeref:typename:glm::vec3	access:public
Transform::scaling	Transform.hpp	/^  glm::vec3 scaling{1, 1, 1};$/;"	m	language:C++	struct:Transform	typeref:typename:glm::vec3	access:public
UNIX	build/CMakeFiles/3.19.3/CMakeCCompiler.cmake	/^  set(UNIX 1)$/;"	v	language:CMake
UNIX	build/CMakeFiles/3.19.3/CMakeCXXCompiler.cmake	/^  set(UNIX 1)$/;"	v	language:CMake
VAO	ogl/vao.hpp	/^  VAO() {$/;"	f	language:C++	struct:VAO	access:public	signature:()
VAO	ogl/vao.hpp	/^struct VAO {$/;"	s	language:C++
VAO::VAO	ogl/vao.hpp	/^  VAO() {$/;"	f	language:C++	struct:VAO	access:public	signature:()
VAO::bind	ogl/vao.hpp	/^  void bind() const {$/;"	f	language:C++	struct:VAO	typeref:typename:void	access:public	signature:() const
VAO::unbind	ogl/vao.hpp	/^  void unbind() const {$/;"	f	language:C++	struct:VAO	typeref:typename:void	access:public	signature:() const
VAO::vao	ogl/vao.hpp	/^  GLuint vao;$/;"	m	language:C++	struct:VAO	typeref:typename:GLuint	access:public
VAO::~VAO	ogl/vao.hpp	/^  ~VAO() {$/;"	f	language:C++	struct:VAO	access:public	signature:()
Window	imgui.ini	/^[Window][Dear ImGui Demo]$/;"	s	language:Iniconf
Window	imgui.ini	/^[Window][Dear ImGui Metrics\/Debugger]$/;"	s	language:Iniconf
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s	language:Iniconf
Window	imgui.ini	/^[Window][Hello, world!]$/;"	s	language:Iniconf
Window	imgui.ini	/^[Window][Transform]$/;"	s	language:Iniconf
_N	ogl/stdafx.hpp	/^#define _N /;"	d	language:C++
_check_opengl_error	ogl/stdafx.hpp	/^void _check_opengl_error(const char *file, int line, const char *hint);$/;"	p	language:C++	typeref:typename:void	signature:(const char * file,int line,const char * hint)
_check_opengl_error	stdafx.cpp	/^void _check_opengl_error(const char *file, int line, const char *hint) {$/;"	f	language:C++	typeref:typename:void	signature:(const char * file,int line,const char * hint)
all	build/Makefile	/^all: cmake_check_build_system$/;"	t	language:Make
attach	ogl/shader.hpp	/^  void attach(Shader const &shader) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(Shader const & shader) const
attach	ogl/texture.hpp	/^  void attach(Texture const &texture) {$/;"	f	language:C++	struct:FBO	typeref:typename:void	access:public	signature:(Texture const & texture)
attribute	ogl/buffer.hpp	/^  void attribute(GLuint index, size_t offset, size_t stride, GLuint type,$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(GLuint index,size_t offset,size_t stride,GLuint type,GLuint count) const
bind	ogl/buffer.hpp	/^  void bind() const { C(glBindBuffer(target, buf)); }$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:() const
bind	ogl/texture.hpp	/^  void bind() const {$/;"	f	language:C++	struct:FBO	typeref:typename:void	access:public	signature:() const
bind	ogl/vao.hpp	/^  void bind() const {$/;"	f	language:C++	struct:VAO	typeref:typename:void	access:public	signature:() const
bind_data	ogl/buffer.hpp	/^  template <typename T> void bind_data(std::vector<T> const &arr) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(std::vector<T> const & arr) const
bind_data	ogl/buffer.hpp	/^  void bind_data(const void *data, size_t size,$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(const void * data,size_t size,GLuint usage=GL_STATIC_DRAW) const
bind_data	ogl/buffer.hpp	/^  void bind_data(std::vector<glm::vec<N, T, Q>> const &arr) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(std::vector<glm::vec<N,T,Q>> const & arr) const
bind_image	ogl/texture.hpp	/^  void bind_image(void *img, size_t nx, size_t ny) {$/;"	f	language:C++	struct:Texture	typeref:typename:void	access:public	signature:(void * img,size_t nx,size_t ny)
bind_sub_data	ogl/buffer.hpp	/^  void bind_sub_data(const void *data, size_t size, size_t offset) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(const void * data,size_t size,size_t offset) const
bind_to	ogl/texture.hpp	/^  void bind_to(int num) {$/;"	f	language:C++	struct:Texture	typeref:typename:void	access:public	signature:(int num)
buf	ogl/buffer.hpp	/^  GLuint buf;$/;"	m	language:C++	struct:Buffer	typeref:typename:GLuint	access:public
center	main.cpp	/^static glm::dvec3 center;$/;"	v	language:C++	typeref:typename:glm::dvec3	file:
clean	build/Makefile	/^clean:$/;"	t	language:Make
clean/fast	build/Makefile	/^clean\/fast: clean$/;"	t	language:Make
click_callback	main.cpp	/^static void click_callback(GLFWwindow *window, int button, int action,$/;"	f	language:C++	typeref:typename:void	file:	signature:(GLFWwindow * window,int button,int action,int mods)
cmake_check_build_system	build/Makefile	/^cmake_check_build_system:$/;"	t	language:Make
cmake_force	build/Makefile	/^cmake_force:$/;"	t	language:Make
compile	ogl/shader.hpp	/^  void compile(std::string const &source) const {$/;"	f	language:C++	struct:Shader	typeref:typename:void	access:public	signature:(std::string const & source) const
complete	ogl/texture.hpp	/^  bool complete() const {$/;"	f	language:C++	struct:FBO	typeref:typename:bool	access:public	signature:() const
const	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define const$/;"	d	language:C	file:
default_target	build/Makefile	/^default_target: all$/;"	t	language:Make
depend	build/Makefile	/^depend:$/;"	t	language:Make
disable_attribute	ogl/buffer.hpp	/^  void disable_attribute(GLuint index) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:(GLuint index) const
draw	Mesh.cpp	/^void Mesh::draw() {$/;"	f	language:C++	class:Mesh	typeref:typename:void	signature:()
draw	Object.hpp	/^  virtual void draw() = 0;$/;"	p	language:C++	class:Object	typeref:typename:void	access:public	signature:()
draw	Object.hpp	/^  virtual void draw() override;$/;"	p	language:C++	class:Mesh	typeref:typename:void	access:public	signature:()
draw	Object.hpp	/^  virtual void draw() override;$/;"	p	language:C++	class:Particles	typeref:typename:void	access:public	signature:()
draw	Particles.cpp	/^void Particles::draw() {$/;"	f	language:C++	class:Particles	typeref:typename:void	signature:()
draw_contents	main.cpp	/^void draw_contents(void) {$/;"	f	language:C++	typeref:typename:void	signature:(void)
dtype	ogl/texture.hpp	/^  GLuint dtype{GL_UNSIGNED_BYTE};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
edit_cache	build/Makefile	/^edit_cache:$/;"	t	language:Make
edit_cache/fast	build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t	language:Make
error_callback	main.cpp	/^static void error_callback(int error, const char *msg) {$/;"	f	language:C++	typeref:typename:void	file:	signature:(int error,const char * msg)
fbo	ogl/texture.hpp	/^  GLuint fbo;$/;"	m	language:C++	struct:FBO	typeref:typename:GLuint	access:public
format	ogl/texture.hpp	/^  GLuint format{GL_RGBA};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
fov	main.cpp	/^static double theta = 0.0, phi = 0.0, radius = 3.0, fov = 60.0;$/;"	v	language:C++	typeref:typename:double	file:
fs	ShaderProgram.hpp	/^  std::unique_ptr<Shader> vs, fs;$/;"	m	language:C++	struct:ShaderProgram	typeref:typename:std::unique_ptr<Shader>	access:public
get_matrix	Transform.hpp	/^  glm::mat4x4 get_matrix() {$/;"	f	language:C++	struct:Transform	typeref:typename:glm::mat4x4	access:public	signature:()
get_opengl_error_string	ogl/stdafx.hpp	/^const char *get_opengl_error_string(GLenum err);$/;"	p	language:C++	typeref:typename:N_ const char *	signature:(GLenum err)
get_opengl_error_string	stdafx.cpp	/^const char *get_opengl_error_string(GLenum err) {$/;"	f	language:C++	typeref:typename:N_ const char *	signature:(GLenum err)
get_program	Mesh.cpp	/^Program *Mesh::get_program() {$/;"	f	language:C++	class:Mesh	typeref:typename:Program *	signature:()
get_program	Object.hpp	/^  Program *get_program();$/;"	p	language:C++	class:Mesh	typeref:typename:Program *	access:private	signature:()
get_program	Object.hpp	/^  Program *get_program();$/;"	p	language:C++	class:Particles	typeref:typename:Program *	access:private	signature:()
get_program	Particles.cpp	/^Program *Particles::get_program() {$/;"	f	language:C++	class:Particles	typeref:typename:Program *	signature:()
gui_editor	GUI.cpp	/^void Transform::gui_editor()$/;"	f	language:C++	class:Transform	typeref:typename:void	signature:()
gui_editor	Transform.hpp	/^  void gui_editor();$/;"	p	language:C++	struct:Transform	typeref:typename:void	access:public	signature:()
help	build/Makefile	/^help:$/;"	t	language:Make
info_arch	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	language:C	typeref:typename:char const *
info_arch	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	language:C++	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	language:C	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	language:C++	typeref:typename:char const *
info_cray	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	language:C	typeref:typename:char const *
info_cray	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	language:C++	typeref:typename:char const *
info_language_dialect_default	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v	language:C	typeref:typename:const char *
info_language_dialect_default	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v	language:C++	typeref:typename:const char *
info_platform	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	language:C	typeref:typename:char const *
info_platform	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	language:C++	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	language:C	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	language:C++	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v	language:C	typeref:typename:char const[]
info_simulate_version	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	language:C++	typeref:typename:char const[]
info_version	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v	language:C	typeref:typename:char const[]
info_version	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	language:C++	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v	language:C	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	language:C++	typeref:typename:char const[]
initialize	main.cpp	/^void initialize(void) {$/;"	f	language:C++	typeref:typename:void	signature:(void)
internal_fmt	ogl/texture.hpp	/^  GLuint internal_fmt{GL_RGBA8};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
key_callback	main.cpp	/^static void key_callback(GLFWwindow *window, int key, int scancode, int action,$/;"	f	language:C++	typeref:typename:void	file:	signature:(GLFWwindow * window,int key,int scancode,int action,int mods)
last_xpos	main.cpp	/^static double last_xpos, last_ypos;$/;"	v	language:C++	typeref:typename:double	file:
last_ypos	main.cpp	/^static double last_xpos, last_ypos;$/;"	v	language:C++	typeref:typename:double	file:
link	ogl/shader.hpp	/^  void link() const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:() const
load	Mesh.cpp	/^void Mesh::load(const char *path) {$/;"	f	language:C++	class:Mesh	typeref:typename:void	signature:(const char * path)
load	Object.hpp	/^  virtual void load(const char *path) = 0;$/;"	p	language:C++	class:Object	typeref:typename:void	access:public	signature:(const char * path)
load	Object.hpp	/^  virtual void load(const char *path) override;$/;"	p	language:C++	class:Mesh	typeref:typename:void	access:public	signature:(const char * path)
load	Object.hpp	/^  virtual void load(const char *path) override;$/;"	p	language:C++	class:Particles	typeref:typename:void	access:public	signature:(const char * path)
load	Particles.cpp	/^void Particles::load(const char *path) {$/;"	f	language:C++	class:Particles	typeref:typename:void	signature:(const char * path)
load	ogl/texture.hpp	/^  void load(const char *path) {$/;"	f	language:C++	struct:Texture	typeref:typename:void	access:public	signature:(const char * path)
load_obj	loader.cpp	/^void load_obj($/;"	f	language:C++	typeref:typename:N_ void	signature:(const char * path,std::vector<glm::vec3> & face_vertices,std::vector<glm::vec2> & face_uvs,std::vector<glm::vec3> & face_normals)
load_obj	loader.cpp	/^void load_obj($/;"	f	language:C++	typeref:typename:void	signature:(const char * path,std::vector<glm::vec3> & vertices,std::vector<unsigned> & indices)
load_obj	loader.hpp	/^void load_obj($/;"	p	language:C++	typeref:typename:N_ void	signature:(const char * path,std::vector<glm::vec3> & face_vertices,std::vector<glm::vec2> & face_uvs,std::vector<glm::vec3> & face_normals)
load_obj	loader.hpp	/^void load_obj($/;"	p	language:C++	typeref:typename:void	signature:(const char * path,std::vector<glm::vec3> & vertices,std::vector<unsigned> & indices)
load_particles	loader.cpp	/^void load_particles($/;"	f	language:C++	typeref:typename:void	signature:(const char * path,std::vector<glm::vec3> & positions,std::vector<glm::vec3> & velocities)
load_particles	loader.hpp	/^void load_particles($/;"	p	language:C++	typeref:typename:void	signature:(const char * path,std::vector<glm::vec3> & positions,std::vector<glm::vec3> & velocities)
loader.cpp.i	build/Makefile	/^loader.cpp.i:$/;"	t	language:Make
loader.cpp.o	build/Makefile	/^loader.cpp.o:$/;"	t	language:Make
loader.cpp.s	build/Makefile	/^loader.cpp.s:$/;"	t	language:Make
loader.i	build/Makefile	/^loader.i: loader.cpp.i$/;"	t	language:Make
loader.o	build/Makefile	/^loader.o: loader.cpp.o$/;"	t	language:Make
loader.s	build/Makefile	/^loader.s: loader.cpp.s$/;"	t	language:Make
mag_filter	ogl/texture.hpp	/^  GLuint mag_filter{GL_LINEAR}, min_filter{GL_LINEAR};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
main	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f	language:C	signature:(argc,argv)
main	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f	language:C	typeref:typename:void	signature:()
main	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	language:C++	typeref:typename:int	signature:(int argc,char * argv[])
main	main.cpp	/^int main() {$/;"	f	language:C++	typeref:typename:int	signature:()
main.cpp.i	build/Makefile	/^main.cpp.i:$/;"	t	language:Make
main.cpp.o	build/Makefile	/^main.cpp.o:$/;"	t	language:Make
main.cpp.s	build/Makefile	/^main.cpp.s:$/;"	t	language:Make
main.i	build/Makefile	/^main.i: main.cpp.i$/;"	t	language:Make
main.o	build/Makefile	/^main.o: main.cpp.o$/;"	t	language:Make
main.s	build/Makefile	/^main.s: main.cpp.s$/;"	t	language:Make
map	ogl/buffer.hpp	/^  void *map(GLuint access = GL_READ_WRITE) const {$/;"	f	language:C++	struct:Buffer	typeref:typename:void *	access:public	signature:(GLuint access=GL_READ_WRITE) const
measure_fps	main.cpp	/^void measure_fps(void) {$/;"	f	language:C++	typeref:typename:void	signature:(void)
min_filter	ogl/texture.hpp	/^  GLuint mag_filter{GL_LINEAR}, min_filter{GL_LINEAR};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
mmb_pressed	main.cpp	/^static bool mmb_pressed, shift_pressed, ortho_mode;$/;"	v	language:C++	typeref:typename:bool	file:
motion_callback	main.cpp	/^static void motion_callback(GLFWwindow *window, double xpos, double ypos) {$/;"	f	language:C++	typeref:typename:void	file:	signature:(GLFWwindow * window,double xpos,double ypos)
normals	Object.hpp	/^  std::vector<glm::vec3> normals;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<glm::vec3>	access:private
nx	main.cpp	/^static int nx = 1024, ny = 768;$/;"	v	language:C++	typeref:typename:int	file:
ny	main.cpp	/^static int nx = 1024, ny = 768;$/;"	v	language:C++	typeref:typename:int	file:
objects	main.cpp	/^std::vector<std::unique_ptr<Object>> objects;$/;"	v	language:C++	typeref:typename:std::vector<std::unique_ptr<Object>>
ortho_mode	main.cpp	/^static bool mmb_pressed, shift_pressed, ortho_mode;$/;"	v	language:C++	typeref:typename:bool	file:
phi	main.cpp	/^static double theta = 0.0, phi = 0.0, radius = 3.0, fov = 60.0;$/;"	v	language:C++	typeref:typename:double	file:
position	Transform.hpp	/^  glm::vec3 position{0, 0, 0};$/;"	m	language:C++	struct:Transform	typeref:typename:glm::vec3	access:public
positions	Object.hpp	/^  std::vector<glm::vec3> positions;$/;"	m	language:C++	class:Particles	typeref:typename:std::vector<glm::vec3>	access:private
preinstall	build/Makefile	/^preinstall: all$/;"	t	language:Make
preinstall/fast	build/Makefile	/^preinstall\/fast:$/;"	t	language:Make
pro	ogl/shader.hpp	/^  GLuint pro;$/;"	m	language:C++	struct:Program	typeref:typename:GLuint	access:public
prog_	Mesh.cpp	/^std::unique_ptr<ShaderProgram> Mesh::prog_;$/;"	m	language:C++	class:Mesh	typeref:typename:std::unique_ptr<ShaderProgram>
prog_	Object.hpp	/^  static std::unique_ptr<ShaderProgram> prog_;$/;"	m	language:C++	class:Mesh	typeref:typename:std::unique_ptr<ShaderProgram>	access:private
prog_	Object.hpp	/^  static std::unique_ptr<ShaderProgram> prog_;$/;"	m	language:C++	class:Particles	typeref:typename:std::unique_ptr<ShaderProgram>	access:private
prog_	Particles.cpp	/^std::unique_ptr<ShaderProgram> Particles::prog_;$/;"	m	language:C++	class:Particles	typeref:typename:std::unique_ptr<ShaderProgram>
qnxnto	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	language:C	typeref:typename:char const *
qnxnto	build/CMakeFiles/3.19.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	language:C++	typeref:typename:char const *
quicksilver	build/Makefile	/^quicksilver: cmake_check_build_system$/;"	t	language:Make
quicksilver/fast	build/Makefile	/^quicksilver\/fast:$/;"	t	language:Make
radius	main.cpp	/^static double theta = 0.0, phi = 0.0, radius = 3.0, fov = 60.0;$/;"	v	language:C++	typeref:typename:double	file:
rebuild_cache	build/Makefile	/^rebuild_cache:$/;"	t	language:Make
rebuild_cache/fast	build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t	language:Make
rotationAngle	Transform.hpp	/^  float rotationAngle{0};$/;"	m	language:C++	struct:Transform	typeref:typename:float	access:public
rotationAxis	Transform.hpp	/^  glm::vec3 rotationAxis{0, 0, 1};$/;"	m	language:C++	struct:Transform	typeref:typename:glm::vec3	access:public
scaling	Transform.hpp	/^  glm::vec3 scaling{1, 1, 1};$/;"	m	language:C++	struct:Transform	typeref:typename:glm::vec3	access:public
scroll_callback	main.cpp	/^static void scroll_callback(GLFWwindow *window, double xoffset,$/;"	f	language:C++	typeref:typename:void	file:	signature:(GLFWwindow * window,double xoffset,double yoffset)
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, float val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,float val) const
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat3x3 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat3x3 const & val) const
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat3x4 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat3x4 const & val) const
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat4x3 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat4x3 const & val) const
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::mat4x4 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::mat4x4 const & val) const
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::vec2 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::vec2 const & val) const
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::vec3 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::vec3 const & val) const
set_uniform	ogl/shader.hpp	/^  void set_uniform(const char *name, glm::vec4 const &val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,glm::vec4 const & val) const
set_uniformi	ogl/shader.hpp	/^  void set_uniformi(const char *name, int val) const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:(const char * name,int val) const
sha	ogl/shader.hpp	/^  GLuint sha;$/;"	m	language:C++	struct:Shader	typeref:typename:GLuint	access:public
shift_pressed	main.cpp	/^static bool mmb_pressed, shift_pressed, ortho_mode;$/;"	v	language:C++	typeref:typename:bool	file:
stdafx.cpp.i	build/Makefile	/^stdafx.cpp.i:$/;"	t	language:Make
stdafx.cpp.o	build/Makefile	/^stdafx.cpp.o:$/;"	t	language:Make
stdafx.cpp.s	build/Makefile	/^stdafx.cpp.s:$/;"	t	language:Make
stdafx.i	build/Makefile	/^stdafx.i: stdafx.cpp.i$/;"	t	language:Make
stdafx.o	build/Makefile	/^stdafx.o: stdafx.cpp.o$/;"	t	language:Make
stdafx.s	build/Makefile	/^stdafx.s: stdafx.cpp.s$/;"	t	language:Make
target	ogl/buffer.hpp	/^  GLuint target{GL_ARRAY_BUFFER};$/;"	m	language:C++	struct:Buffer	typeref:typename:GLuint	access:public
target	ogl/shader.hpp	/^  GLuint target{GL_ARRAY_BUFFER};$/;"	m	language:C++	struct:Shader	typeref:typename:GLuint	access:public
target	ogl/texture.hpp	/^  GLuint target{GL_FRAMEBUFFER};$/;"	m	language:C++	struct:FBO	typeref:typename:GLuint	access:public
target	ogl/texture.hpp	/^  GLuint target{GL_TEXTURE_2D};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
tex	ogl/texture.hpp	/^  GLuint tex;$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
theta	main.cpp	/^static double theta = 0.0, phi = 0.0, radius = 3.0, fov = 60.0;$/;"	v	language:C++	typeref:typename:double	file:
trans	Object.hpp	/^  Transform trans;$/;"	m	language:C++	class:Object	typeref:typename:Transform	access:public
unbind	ogl/buffer.hpp	/^  void unbind() const { C(glBindBuffer(target, 0)); }$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:() const
unbind	ogl/texture.hpp	/^  void unbind() const {$/;"	f	language:C++	struct:FBO	typeref:typename:void	access:public	signature:() const
unbind	ogl/vao.hpp	/^  void unbind() const {$/;"	f	language:C++	struct:VAO	typeref:typename:void	access:public	signature:() const
unmap	ogl/buffer.hpp	/^  void unmap() const { C(glUnmapBuffer(target)); }$/;"	f	language:C++	struct:Buffer	typeref:typename:void	access:public	signature:() const
update	Mesh.cpp	/^void Mesh::update() {$/;"	f	language:C++	class:Mesh	typeref:typename:void	signature:()
update	Object.hpp	/^  virtual void update() = 0;$/;"	p	language:C++	class:Object	typeref:typename:void	access:public	signature:()
update	Object.hpp	/^  virtual void update() override;$/;"	p	language:C++	class:Mesh	typeref:typename:void	access:public	signature:()
update	Object.hpp	/^  virtual void update() override;$/;"	p	language:C++	class:Particles	typeref:typename:void	access:public	signature:()
update	Particles.cpp	/^void Particles::update() {$/;"	f	language:C++	class:Particles	typeref:typename:void	signature:()
update_camera	Transform.hpp	/^void update_camera(Program *pro);$/;"	p	language:C++	typeref:typename:void	signature:(Program * pro)
update_camera	main.cpp	/^void update_camera(Program *pro) {$/;"	f	language:C++	typeref:typename:void	signature:(Program * pro)
use	ogl/shader.hpp	/^  void use() const {$/;"	f	language:C++	struct:Program	typeref:typename:void	access:public	signature:() const
uvs	Object.hpp	/^  std::vector<glm::vec2> uvs;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<glm::vec2>	access:private
vao	main.cpp	/^std::unique_ptr<VAO> vao;$/;"	v	language:C++	typeref:typename:std::unique_ptr<VAO>
vao	ogl/vao.hpp	/^  GLuint vao;$/;"	m	language:C++	struct:VAO	typeref:typename:GLuint	access:public
vbo	Object.hpp	/^  std::unique_ptr<Buffer> vbo;$/;"	m	language:C++	class:Mesh	typeref:typename:std::unique_ptr<Buffer>	access:private
vbo	Object.hpp	/^  std::unique_ptr<Buffer> vbo;$/;"	m	language:C++	class:Particles	typeref:typename:std::unique_ptr<Buffer>	access:private
velocities	Object.hpp	/^  std::vector<glm::vec3> velocities;$/;"	m	language:C++	class:Particles	typeref:typename:std::vector<glm::vec3>	access:private
vertex_data	Object.hpp	/^  std::vector<float> vertex_data;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<float>	access:private
vertex_data	Object.hpp	/^  std::vector<float> vertex_data;$/;"	m	language:C++	class:Particles	typeref:typename:std::vector<float>	access:private
vertices	Object.hpp	/^  std::vector<glm::vec3> vertices;$/;"	m	language:C++	class:Mesh	typeref:typename:std::vector<glm::vec3>	access:private
volatile	build/CMakeFiles/3.19.3/CompilerIdC/CMakeCCompilerId.c	/^# define volatile$/;"	d	language:C	file:
vs	ShaderProgram.hpp	/^  std::unique_ptr<Shader> vs, fs;$/;"	m	language:C++	struct:ShaderProgram	typeref:typename:std::unique_ptr<Shader>	access:public
window	main.cpp	/^static GLFWwindow *window;$/;"	v	language:C++	typeref:typename:GLFWwindow *	file:
wrap_s	ogl/texture.hpp	/^  GLuint wrap_s{GL_CLAMP_TO_EDGE}, wrap_t{GL_CLAMP_TO_EDGE};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
wrap_t	ogl/texture.hpp	/^  GLuint wrap_s{GL_CLAMP_TO_EDGE}, wrap_t{GL_CLAMP_TO_EDGE};$/;"	m	language:C++	struct:Texture	typeref:typename:GLuint	access:public
x	GNUmakefile	/^x:$/;"	t	language:Make
~Buffer	ogl/buffer.hpp	/^  ~Buffer() { C(glDeleteBuffers(1, &buf)); }$/;"	f	language:C++	struct:Buffer	access:public	signature:()
~FBO	ogl/texture.hpp	/^  ~FBO() {$/;"	f	language:C++	struct:FBO	access:public	signature:()
~Program	ogl/shader.hpp	/^  ~Program() {$/;"	f	language:C++	struct:Program	access:public	signature:()
~Shader	ogl/shader.hpp	/^  ~Shader() {$/;"	f	language:C++	struct:Shader	access:public	signature:()
~Texture	ogl/texture.hpp	/^  ~Texture() {$/;"	f	language:C++	struct:Texture	access:public	signature:()
~VAO	ogl/vao.hpp	/^  ~VAO() {$/;"	f	language:C++	struct:VAO	access:public	signature:()
