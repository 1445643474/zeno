#include <cuda.h>
#include <nvrtc.h>
#include <cuda_runtime.h>
#include <iostream>
#include <string>
#include <vector>
#include <cstdio>

#define CU(x) do { \
    CUresult __res = (x); \
    if (__res != CUDA_SUCCESS) { \
        const char *__err; \
        cuGetErrorString(__res, &__err); \
        printf("%s:%d: %s: %s (%d)\n", __FILE__, __LINE__, #x, __err, __res); \
        abort(); \
    } \
} while (0)

#define NVRTC(x) do { \
    nvrtcResult __res = (x); \
    if (__res != NVRTC_SUCCESS) { \
        const char *__err = nvrtcGetErrorString(__res); \
        printf("%s:%d: %s: %s (%d)\n", __FILE__, __LINE__, #x, __err, __res); \
        abort(); \
    } \
} while (0)


// PTX codes below is generic with the following command:
//   nvcc kernel.cu -ptx -arch=sm_75 -o kernel.ptx
// may also add `--keep` to CMAKE_CUDA_FLAGS to obtain .ptx files in build/
static std::string kernelCuPtx = R"(
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29920130
// Cuda compilation tools, release 11.3, V11.3.109
// Based on NVVM 7.0.1
//

.version 7.3
.target sm_75
.address_size 64

	// .globl	caller
.extern .func  (.param .b32 func_retval0) _Z5twicei
(
	.param .b32 _Z5twicei_param_0
)
;
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[16] = {116, 119, 105, 99, 101, 40, 37, 100, 41, 32, 61, 32, 37, 100, 10, 0};

.visible .entry caller()
{
	.local .align 8 .b8 	__local_depot0[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	mov.u32 	%r1, 233;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.b32 	[param0+0], %r1;
	.param .b32 retval0;
	call.uni (retval0),
	_Z5twicei,
	(
	param0
	);
	ld.param.b32 	%r2, [retval0+0];
	} // callseq 0
	add.u64 	%rd1, %SP, 0;
	add.u64 	%rd2, %SPL, 0;
	st.local.v2.u32 	[%rd2], {%r1, %r2};
	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0),
	vprintf,
	(
	param0,
	param1
	);
	ld.param.b32 	%r3, [retval0+0];
	} // callseq 1
	ret;

}
    )";

CUmodule compileJITModule
    ( CUdevice dev
    , const char *source
    , std::vector<std::string> const &existingPtxs
    ) {
    int major, minor;
    CU(cuDeviceGetAttribute(&major,
        CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, dev));
    CU(cuDeviceGetAttribute(&minor,
        CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, dev));

    printf("arch=sm_%d%d\n", major, minor);

    char compileArchParam[256];
    sprintf(compileArchParam, "--gpu-architecture=sm_%d%d", major, minor);
    char *compileParams[] = {compileArchParam, (char *)"--device-c"};

    nvrtcProgram prog;
    nvrtcCreateProgram(&prog, source, "<nvrtc>", 0, NULL, NULL);
    nvrtcResult res = nvrtcCompileProgram(prog, 2, compileParams);

    size_t logSize;
    NVRTC(nvrtcGetProgramLogSize(prog, &logSize));
    char *log = new char[logSize + 1];
    NVRTC(nvrtcGetProgramLog(prog, log));
    log[logSize] = '\0';
    if (strlen(log) >= 2) {
        std::cerr << "\n compilation log ---\n";
        std::cerr << log;
        std::cerr << "\n end log ---\n";
    }
    delete log;

    size_t codeSize;
    NVRTC(nvrtcGetPTXSize(prog, &codeSize));
    char *code = new char[codeSize + 1];
    NVRTC(nvrtcGetPTX(prog, code));
    code[codeSize] = '\0';

    //printf("nvrtc gives:\n%s\n", code);

    CUlinkState state;
    CU(cuLinkCreate(0, NULL, NULL, &state));

    CU(cuLinkAddData(state, CU_JIT_INPUT_PTX, code,
        codeSize, "nvrtc", 0, NULL, NULL));
    delete code;

    for (auto const &ptx: existingPtxs) {
        CU(cuLinkAddData(state, CU_JIT_INPUT_PTX, (char *)ptx.data(),
            ptx.size(), "kernel", 0, NULL, NULL));
    }

    void *cubin;
    size_t cubinSize;
    CU(cuLinkComplete(state, &cubin, &cubinSize));

    CUmodule module;
    CU(cuModuleLoadData(&module, cubin));

    return module;
}


int main() {
    CU(cuInit(0));

    CUdevice dev;
    CU(cuDeviceGet(&dev, 0));

    CUcontext ctx;
    CU(cuCtxCreate(&ctx, 0, dev));

    const char source[] = R"(
    __device__ int twice(int x) {
        return x * 2;
    }
    )";
    CUmodule module = compileJITModule(dev, source, {kernelCuPtx});

    CUfunction function;
    cuModuleGetFunction(&function, module, "caller");

    CU(cuLaunchKernel(function,
            1, 1, 1, 1, 1, 1,
            0, 0, NULL, 0));

    CU(cuCtxSynchronize());

    printf("done\n");

    return 0;
}
