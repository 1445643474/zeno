#include <cuda.h>
#include <cuda_runtime.h>
#include <string>
#include <cstdio>

#define CU(x) do { \
    CUresult __res = (x); \
    if (__res != CUDA_SUCCESS) { \
        const char *__err; \
        cuGetErrorString(__res, &__err); \
        printf("%s:%d: %s: %s\n", __FILE__, __LINE__, #x, __err); \
        abort(); \
    } \
} while (0)

int main() {
    CU(cuInit(0));

    CUdevice dev;
    CU(cuDeviceGet(&dev, 0));

    CUcontext ctx;
    CU(cuCtxCreate(&ctx, 0, dev));

    CUlinkState state;
    CU(cuLinkCreate(0, NULL, NULL, &state));

    std::string ptx = R"(
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29920130
// Cuda compilation tools, release 11.3, V11.3.109
// Based on NVVM 7.0.1
//

.version 7.3
.target sm_75
.address_size 64

	// .globl	_Z6kernelv
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[15] = {70, 85, 67, 75, 32, 85, 32, 78, 86, 73, 68, 73, 65, 10, 0};

.visible .entry _Z6kernelv()
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<4>;


	mov.u64 	%rd1, $str;
	cvta.global.u64 	%rd2, %rd1;
	mov.u64 	%rd3, 0;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd2;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd3;
	.param .b32 retval0;
	call.uni (retval0),
	vprintf,
	(
	param0,
	param1
	);
	ld.param.b32 	%r1, [retval0+0];
	} // callseq 0
	ret;

}
    )";
    CU(cuLinkAddData(state, CU_JIT_INPUT_PTX, ptx.data(),
        ptx.size(), "kernel", 0, NULL, NULL));

    void *cubin;
    size_t cubinSize;
    CU(cuLinkComplete(state, &cubin, &cubinSize));

    CUmodule module;
    CU(cuModuleLoadData(&module, cubin));

    CU(cuCtxSynchronize());

    printf("done\n");

    return 0;
}
